"NeoBundle"

"NeoBundle Settings"

set nocompatible
filetype off

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim
endif

call neobundle#begin(expand('~/.vim/bundle'))

"NeoBundle Plugins"
NeoBundle 'Shougo/unite.vim' 
NeoBundle 'Shougo/neomru.vim' 
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'tomasr/molokai'
NeoBundle 'sophacles/vim-processing'
NeoBundle 'thinca/vim-quickrun'

NeoBundle 'Shougo/vimproc', {
  \ 'build' : {
    \ 'windows' : 'make -f make_mingw32.mak',
    \ 'cygwin' : 'make -f make_cygwin.mak',
    \ 'mac' : 'make -f make_mac.mak',
    \ 'unix' : 'make -f make_unix.mak',
  \ },
\ }

NeoBundle 'sudo.vim'

call neobundle#end()

filetype plugin indent on

NeoBundleCheck

"Settings"

set nocompatible
set noswapfile
set autoread
set nobackup
set history=10000

"Encoding"

set encoding=utf-8
set fenc=utf-8
set fencs=ucs_bom,utf-8,euc-jp,iso-2022-jp,cp932
set ffs=unix,dos,mac

"Display"

set showmatch
set number
syntax on
colorscheme molokai
set t_Co=256

""molokai for iTerm2"
if has("mac")
  highlight Normal ctermbg=none
endif

"Indent"

set autoindent
set cindent
set tabstop=2
set shiftwidth=2
set softtabstop=0
set smarttab
set expandtab
set shiftround

"Clipboard"

set clipboard=unnamed

"Search Settings"

set ignorecase
set smartcase
set wrapscan
set hlsearch
set incsearch

"Key Settings"

set backspace=indent,eol,start

" quickrun"
let g:quickrun_config = {}
let g:quickrun_config.processing =  {
      \     'command': 'processing-java',
      \     'exec': '%c --sketch=$PWD/ --output=/Document/Processing --run --force',
      \   }

"nepcomplete"

let g:neocomplete#enable_at_startup = 1
let g:neocomplcache_auto_completion_start_length = 3
let g:neocomplete#enable_camel_case_completion = 1
let g:neocomplete#enable_underbar_completion = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#force_overwrite_completefunc = 1
let g:neocomplcache_max_list = 20

"neosnippet"

imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

"unite"

let g:unite_source_history_yank_enable =1
