export EDITOR=vim
export VISUAL=vim
export TERM='xterm-256color'
export WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'
export LESS='-g -i -M -R -W -z-4 -x4'
export XDG_CONFIG_HOME=$HOME/.config

# zinit
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing DHARMA Initiative Plugin Manager (zdharma/zinit)…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f" || \
        print -P "%F{160}▓▒░ The clone has failed.%f"
fi
source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

zplugin ice wait'!0'
zinit light zsh-users/zsh-syntax-highlighting

zinit light zsh-users/zsh-history-substring-search

zinit light zsh-users/zsh-completions

zplugin ice wait'!0' pick'init.sh'
zinit light b4b4r07/enhancd

zinit ice wait'!0' from"gh-r" as"program"
zinit light junegunn/fzf-bin

# colors
autoload -Uz colors
colors

# keybind
bindkey -e

# history
HISTFILE=~/.zsh_history
HISTSIZE=1000000
SAVEHIST=1000000

# prompt
PROMPT="%{${fg[cyan]}%}[%n@%m]%{${reset_color}%} %~ %# "

# 単語の区切り文字を指定する
autoload -Uz select-word-style
select-word-style default
# ここで指定した文字は単語区切りとみなされる
# / も区切りと扱うので、^W でディレクトリ１つ分を削除できる
zstyle ':zle:*' word-chars " /=;@:{},|"
zstyle ':zle:*' word-style unspecified

# zsh-completions
fpath=(/usr/local/share/zsh-completions $fpath)

# 補完で小文字でも大文字にマッチさせる
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# ../ の後は今いるディレクトリを補完しない
zstyle ':completion:*' ignore-parents parent pwd ..

# sudo の後ろでコマンド名を補完する
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin \
                   /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin

# ps コマンドのプロセス名補完
zstyle ':completion:*:processes' command 'ps x -o pid,s,args'

# オプション
# 日本語ファイル名を表示可能にする
setopt print_eight_bit

# beep を無効にする
setopt no_beep

# フローコントロールを無効にする
setopt no_flow_control

# '#' 以降をコメントとして扱う
setopt interactive_comments

# ディレクトリ名だけでcdする
setopt auto_cd

# cd したら自動的にpushdする
setopt auto_pushd

# 重複したディレクトリを追加しない
setopt pushd_ignore_dups

# = の後はパス名として補完する
setopt magic_equal_subst

# 同時に起動したzshの間でヒストリを共有する
setopt share_history

# 同じコマンドをヒストリに残さない
setopt hist_ignore_all_dups

# ヒストリファイルに保存するとき、すでに重複したコマンドがあったら古い方を削除する
setopt hist_save_nodups

# スペースから始まるコマンド行はヒストリに残さない
setopt hist_ignore_space

# ヒストリに保存するときに余分なスペースを削除する
setopt hist_reduce_blanks

# 補完候補が複数あるときに自動的に一覧表示する
setopt auto_menu

# 高機能なワイルドカード展開を使用する
setopt extended_glob

# alias
alias la="ls -a"
alias ll="ls -l"
alias lal="ls -al"

# clipboard
if [ $commands[pbcopy] ]; then
    # Mac
    alias -g C='| pbcopy'
elif [ $commands[xsel] ]; then
    # Linux
    alias -g C='| xsel --input --clipboard'
elif [ $commands[putclip] ]; then
    # Cygwin
    alias -g C='| putclip'
fi

# OS
case ${OSTYPE} in
  darwin*)
    export LANG="ja_JP.UTF-8"
    export CLICOLOR=1
    alias ls='ls -G -F'
	  typeset -U path cdpath fpath manpath

	  ## set PATH for sudo
	  typeset -xT SUDO_PATH sudo_path
	  typeset -U sudo_path
	  sudo_path=({/usr/local,/usr,}/sbin(N-/))

	  ## set PATH
	  path=(~/bin(N-/) /usr/local/bin(N-/) ${path})
	  export ZPLUG_HOME=/usr/local/opt/zplug
	  export PATH=$PATH:/usr/local/opt/go/libexec/bin
	  source ~/.iterm2_shell_integration.`basename $SHELL`
  ;;
  linux*)
  ;;
esac

eval "$(starship init zsh)"

if [ $commands[nvim] ]; then
  alias vim='nvim';
fi

# sdkman
export SDKMAN_DIR="$HOME/.sdkman"
  sdk() {
    unfunction "$0"
    [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
    $0 "$@"
  }

# pyenv
if [ ! $commands[pyenv] ]; then
  export path=$HOME/.pyenv/bin:$PATH
fi

pyenv() {
  unfunction "$0"
  eval "$(pyenv init -)"
  $0 "$@"
}

# rbenv
if [ ! $commands[rbenv] ]; then
  export path=$HOME/.rbenv/bin:$PATH
fi

rbenv() {
  unfunction "$0"
  eval "$(rbenv init -)"
  $0 "$@"
}

if [ -e $HOME/.goenv/bin/goenv ]; then
  export GOENV_ROOT=$HOME/.goenv
  export PATH=$GOENV_ROOT/bin:$PATH
  goenv() {
    unfunction "$0"
    eval "$(goenv init -)"
    $0 "$@"
  }
fi

# GCLOUD ENV
export GOOGLE_APPLICATION_CREDENTIALS=$HOME/.config/gcloud/application_default_credentials.json

# completion for google-cloud-sdk
if [ -e /usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc ]; then
  source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc'
fi

if [ -e /usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc ]; then
  source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc'
fi

# kubectl completion
if [ $commands[kubectl] ]; then
  kubectl() {
    unfunction "$0"
    source <(kubectl completion zsh)
    $0 "$@"
  }
fi

# helm completion
if [ $commands[helm] ]; then
  helm() {
    unfunction "$0"
    source <(helm completion zsh)
    $0 "$@"
  }
fi

complete -o nospace -C /usr/local/bin/terraform terraform

# n
export N_PREFIX="$HOME/.n"
export PATH="$N_PREFIX/bin:$PATH"

# fzf
function select-history() {
	BUFFER=$(history -n -r 1 | fzf --no-sort +m --query "$LBUFFER" --prompt="History > ")
  CURSOR=$#BUFFER
}
zle -N select-history
bindkey '^r' select-history

# ghq
function ghq-fzf() {
  local dir=$(ghq root)/$(ghq list | fzf)
  if [ -n $dir ]; then
    BUFFER="cd $dir"
    zle accept-line
  fi
}
zle -N ghq-fzf
bindkey '^]' ghq-fzf

# load .zshrc_local
if [ -e $HOME/.zshrc_local ]; then
  source $HOME/.zshrc_local
else
  :
fi

# direnv
if [ $commands[direnv] ]; then
  eval "$(direnv hook zsh)"
fi

# compile .zshrc
if [ ~/.zshrc -nt ~/.zshrc.zwc ]; then
  zcompile ~/.zshrc
fi

# exec zprof if exists
if (which zprof > /dev/null 2>&1) ;then
  zprof
fi
